#!/bin/zsh
###############################################################################
#                                                                             #
# Copyright 2019. Triad National Security, LLC. All rights reserved.          #
# This program was produced under U.S. Government contract 89233218CNA000001  #
# for Los Alamos National Laboratory (LANL), which is operated by Triad       #
# National Security, LLC for the U.S. Department of Energy/National Nuclear   #
# Security Administration.                                                    #
#                                                                             #
# All rights in the program are reserved by Triad National Security, LLC, and #
# the U.S. Department of Energy/National Nuclear Security Administration. The #
# Government is granted for itself and others acting on its behalf a          #
# nonexclusive, paid-up, irrevocable worldwide license in this material to    #
# reproduce, prepare derivative works, distribute copies to the public,       #
# perform publicly and display publicly, and to permit others to do so.       #
#                                                                             #
###############################################################################

# Postflight script that is run during the install of the stonix4mac.pkg
#
# Creates a /etc/stonix.conf file. Creates a symlink from
# /usr/local/bin/stonix -> /Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix
#
# Author: Roy Nielsen
# Change: 25/10/2019 - Brandon R. Gonzales - Convert from python3 to zsh


echo "Starting stonix4mac package postflight..."
logger "Starting stonix4mac package postflight..."


# If /etc/stonix.conf does not exist, "touch" the file
# Remove old installation of stonix
if [[ ! -a /etc/stonix.conf ]]; then
    echo "Creating /etc/stonix.conf..."
    logger "Creating /etc/stonix.conf..."
    touch /etc/stonix.conf
    chmod 644 /etc/stonix.conf
fi


# sync


# Make sure directories are 775, files and links are 664
# Required on the Mac, especially for admins to be able to
# update the app.
#
# pass in the directory you want to start from.
APP_DIR=/Applications/stonix4mac.app

if [[ -a ${APP_DIR} ]]; then
    find ${APP_DIR} -type d -exec chmod 755 {} \;

    find ${APP_DIR} -type f -exec chmod 644 {} \;
fi


# sync


# Purpose: to make stonix4mac and stonix executable blobs executable.
# Note from Brandon: Redundant?
STONIX4MAC_EXEC=/Applications/stonix4mac.app/Contents/MacOS/stonix4mac
STONIX_EXEC=/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix

if [[ -a ${STONIX4MAC_EXEC} ]]; then
    chmod 755 ${STONIX4MAC_EXEC}
fi

if [[ -a ${STONIX_EXEC} ]]; then
    chmod 755 ${STONIX_EXEC}
fi


# sync


#####
# Create /usr/local/bin if it doesn't exist.  Also, if it's a file,
# move it and create a directory
if [[ ! -a /usr/local/bin ]]; then
    mkdir /usr/local/bin
elif [[ -f /usr/local/bin ]]; then
    mv /usr/local/bin usr/local/bin.bak.$(date +%F.%R)
    mkdir /usr/local/bin
fi

    # Change the owner for /usr/local/bin, leftover code from python
    # chown /usr/local/bin (both user and group)
    #try:
    #    os.chown("/usr/local/bin", 0, 0)
    #except Exception as err:
    #    log_message("Could not chown /usr/local/bin")
    #    log_message(traceback.format_exc())
    #    log_message("Associated exception: " + str(err))

# fix /usr/local/bin
if [[ -a /usr/local/bin ]]; then
    chmod 755 /usr/local/bin
fi


# sync


# Check if STONIX_LINK exists, if it does not, create the link. If it
# does, check if it is a link to STONIX_LINK_SOURCE. If it isn't, move
# it to a backup and create a link.
#
# stonix symlink:
# /usr/local/bin/stonix -> /Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix
#
STONIX_LINK=/usr/local/bin/stonix
STONIX_LINK_SOURCE=/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix
if [[ ! -a ${STONIX_LINK} ]]; then
    #####
    # Symlink does not exist, creating the link
    echo "Creating symlink: ${STONIX_LINK} -> ${STONIX_LINK_SOURCE}..."
    logger "Creating symlink: ${STONIX_LINK} -> ${STONIX_LINK_SOURCE}..."
    ln -s ${STONIX_LINK_SOURCE} ${STONIX_LINK}

elif [[ ! -L ${STONIX_LINK } || ! -e ${STONIX_LINK} || ! ${STONIX_LINK} -ef ${STONIX_LINK_SOURCE} ]]; then
    #####
    # File exists but is not a symlink to our source, moving the existing file to backup and creating the symlink
    logger "${STONIX_LINK} already exists but is not a symlink to ${STONIX_LINK_SOURCE}. Moving ${STONIX_LINK} to ${STONIX_LINK}.bak.date.time"
    mv ${STONIX_LINK} ${STONIX_LINK}.bak.$(date +%F.%R)

    echo "Creating symlink: ${STONIX_LINK} -> ${STONIX_LINK_SOURCE}..."
    logger "Creating symlink: ${STONIX_LINK} -> ${STONIX_LINK_SOURCE}..."
    ln -s ${STONIX_LINK_SOURCE} ${STONIX_LINK}
fi


# sync


# Check if STONIX4MAC_LINK exists, if it does not, create the link. If it
# does, check if it is a link to STONIX4MAC_LINK_SOURCE. If it isn't, move
# it to a backup and create a link.
#
# stonix4mac symlink:
# /usr/local/bin/stonix4mac -> /Applications/stonix4mac.app/Contents/MacOS/stonix4mac
#
STOINX4MAC_LINK=/usr/local/bin/stonix4mac
STONIX4MAC_LINK_SOURCE=/Applications/stonix4mac.app/Contents/MacOS/stonix4mac
if [[ ! -a ${STOINX4MAC_LINK} ]]; then
    #####
    # Symlink does not exist, creating the link
    echo "Creating symlink: ${STOINX4MAC_LINK} -> ${STONIX4MAC_LINK_SOURCE}..."
    logger "Creating symlink: ${STOINX4MAC_LINK} -> ${STONIX4MAC_LINK_SOURCE}..."
    ln -s ${STONIX4MAC_LINK_SOURCE} ${STOINX4MAC_LINK}

elif [[ ! -L ${STOINX4MAC_LINK } || ! -e ${STOINX4MAC_LINK} || ! ${STOINX4MAC_LINK} -ef ${STONIX4MAC_LINK_SOURCE} ]]; then
    #####
    # File exists but is not a symlink to our source, moving the existing file to backup and creating the symlink
    logger "${STOINX4MAC_LINK} already exists but is not a symlink to ${STONIX4MAC_LINK_SOURCE}. Moving ${STOINX4MAC_LINK} to ${STOINX4MAC_LINK}.bak.date.time"
    mv ${STOINX4MAC_LINK} ${STOINX4MAC_LINK}.bak.$(date +%F.%R)

    echo "Creating symlink: ${STOINX4MAC_LINK} -> ${STONIX4MAC_LINK_SOURCE}..."
    logger "Creating symlink: ${STOINX4MAC_LINK} -> ${STONIX4MAC_LINK_SOURCE}..."
    ln -s ${STONIX4MAC_LINK_SOURCE} ${STOINX4MAC_LINK}
fi


# sync


/usr/libexec/makewhatis


logger "Finished stonix4mac package postinstall..."