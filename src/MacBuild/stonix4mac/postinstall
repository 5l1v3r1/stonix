#!/usr/bin/python
###############################################################################
#                                                                             #
# Copyright 2015.  Los Alamos National Security, LLC. This material was       #
# produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos    #
# National Laboratory (LANL), which is operated by Los Alamos National        #
# Security, LLC for the U.S. Department of Energy. The U.S. Government has    #
# rights to use, reproduce, and distribute this software.  NEITHER THE        #
# GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY,        #
# EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  #
# If software is modified to produce derivative works, such modified software #
# should be clearly marked, so as not to confuse it with the version          #
# available from LANL.                                                        #
#                                                                             #
# Additionally, this program is free software; you can redistribute it and/or #
# modify it under the terms of the GNU General Public License as published by #
# the Free Software Foundation; either version 2 of the License, or (at your  #
# option) any later version. Accordingly, this program is distributed in the  #
# hope that it will be useful, but WITHOUT ANY WARRANTY; without even the     #
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    #
# See the GNU General Public License for more details.                        #
#                                                                             #
###############################################################################
"""
Postflight script that is run during the install of the stonix4mac.pkg 

Primary purpose is to create a link from /etc/stonix ->
/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/Resources/stonix.conf

@author: Roy Nielsen
"""
import os
import re
import sys
import time
import errno
import shutil
import random
import inspect

from subprocess import call, Popen, PIPE

def log_message(message="", level="normal", priority="debug", syslog_level=None) :
    """
    Logs a message to both stdout and to syslog via logger

    message - the message to log
    
    level - print the message if this value is less than or equal to
            the "priority" 
    
    priority - defined value to used to compare with the "level".  If 
               the level is less than or equal to the priority value,
               the message will be printed to stdout and via logger
    
    syslog_level - the syslog level to log with

    Author: Roy Nielsen
    """
    if syslog_level is None :
        syslog_level = ""
    else :
        syslog_level = "-p " + syslog_level + " "

    if not re.match("^normal$", level) :
        prog = sys.argv[0]
        # message to be in the format: 
        # <calling_script_name> : <name_of_calling_function> (<line number of calling function>) - <LEVEL>: <message to print>
        message = str(prog) + " : " + \
        inspect.stack()[1][3] + " (" + str(inspect.stack()[1][2]) + ") - " + \
        level.upper() + ": " + str(message)
    else :
        prog = sys.argv[0]
        message = str(prog) + " - " + inspect.stack()[1][3] + \
        " (" + str(inspect.stack()[1][2]) + ") - " + " : " + str(message)
    
    levels = ['quiet', 'normal', 'verbose', 'debug']
    
    if levels.index(level) <= levels.index(priority) :

        print message
        cmd_string = "/usr/bin/logger " + syslog_level + "\"" + message +"\""
        retcode = ""
        try :
            retcode = call(cmd_string, shell=True)
            if retcode < 0 :
                print >> sys.stderr, \
                         "logger Child was terminated by signal", \
                        -retcode
            else :
                pass

        except OSError, err :
            print >> sys.stderr, \
                     "Execution of " + \
                     str(cmd_string) + \
                     " failed: ", \
                     err


def touch(fname="", message_level="normal") :
    """
    Python implementation of the touch command..
    
    inspiration: http://stackoverflow.com/questions/1158076/implement-touch-using-python
    
    @author: Roy Nielsen
    """
    if re.match("^\s*$", fname) :
        log_message("Cannot touch a file without a filename....", "normal", message_level)
    else :
        try:
            os.utime(fname, None)
        except:
            try :
                open(fname, 'a').close()
            except Exception, err :
                log_message("Cannot open to touch: " + str(fname), "normal", message_level)


def checkSrcLink(targetStonixConf, message_level="normal"):
    """
    Checks the link in the stonix app to /etc/stonix.conf is correct.  Calls
    fixSrcLink if it needs to be fixed.
    """
    success = True
    if os.path.islink(targetStonixConf):
        linkto = os.readlink(targetStonixConf)
        if not re.match("/etc/stonix.conf", linkto):
            success = False
    else:
        success = False
    log_message("Check link is returning: " + str(success))
    return success

    
def isvalidlink(path):
    assert os.path.lexists(path)
    try:
        os.stat(path)
    except os.error, err:
        # errno.ENOENT: broken link - "No such file or directory"
        # errno.ELOOP: circular link - "Too many levels of symlinks"
        if err.errno == errno.ENOENT or err.errno == errno.ELOOP:
            return 0
        # something else occurred,
        # assume it as invalid anyway
        else:
            raise
    return 1


def verifyAndFixEtcConf(target="", message_level="normal"):
    """
    Check if the /etc/stonix file is a link and if it's ok or not.  If it's not
    then we delete the link and touch an empty file..
    
    @author: Roy Nielsen
    """
    if re.match("^\s*$", target) :
        log_message("Cannot link to an empty destination...", "normal", self.message_level)
    else :

        targetRootStonixConf = os.path.join(target, "/etc/stonix.conf")

        #####
        # test if /etc/stonix.conf exists

        if os.path.islink(targetRootStonixConf):
            if isvalidlink(targetRootStonixConf):
                log_message("Link looks ok, checking link destination...")
                dest = os.readlink(targetRootStonixConf)
                if re.match("/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/Resources/stonix.conf", dest.strip()):
                    os.unlink(targetRootStonixConf)
                    touch(targetRootStonixConf)
                else:
                    log_message("link destination appears valid...")
            else:
                log_message("Deleting link and creating an empty /etc/stonix.conf")
                os.unlink(targetRootStonixConf)
                touch(targetRootStonixConf)
        elif not os.path.exists(targetRootStonixConf) :
            try :
                touch(targetRootStonixConf)
            except Exception, err:
                log_message("Exception trying to touch /etc/stonix.conf: " + str(err))
                sys.exit(253)
        elif not os.path.isfile(targetRootStonixConf):
            
            #####
            #Get the date
            myDate = time.strftime("%C%y%m%d", time.localtime())
            myTime = time.strftime("%I%M%S%p", time.localtime())
    
            #####
            # append the bak.date to the filename
            backup = targetRootAppStonix + "." + myDate + "." + mytime
            try:
                shutil.move(targetRootAppStonixConf, backup)
            except Exception, err:
                log_message("Exception trying to move file: " + str(plist_path))
                log_message("Associated exception: " + str(err))
        
            else:
                touch(targetRootStonixConf)


def verifyAndFixAppConf(target="", message_level="normal"):
    """
    Check to make sure the app conf file is a symlink pointing to /etc/stonix.conf
    
    @author: Roy Nielsen
    """
    if re.match("^\s*$", target) :
        log_message("Cannot link to an empty destination...", "normal", self.message_level)
    else :
        targetAppStonixConf = os.path.join(target, "Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/Resources/stonix.conf")
    
        if os.path.islink(targetAppStonixConf):
            if not isvalidlink(targetAppStonixConf):
                log_message("Broken link, attempting to fix...")
                os.unlink(targetAppStonixConf)
                os.symlink("/etc/stonix.conf", targetAppStonixConf)
            else:
                log_message("Link looks good, continuing...")
        elif not os.path.exists(targetAppStonixConf):
            os.symlink("/etc/stonix.conf", targetAppStonixConf)
        elif os.path.exists(targetAppStonixConf):
            #####
            #Get the date
            myDate = time.strftime("%C%y%m%d", time.localtime())
            myTime = time.strftime("%I%M%S%p", time.localtime())
    
            #####
            # append the bak.date to the filename
            backup = targetAppStonixConf + "." + myDate + "." + mytime
            try:
                shutil.move(targetAppStonixConf, backup)
            except Exception, err:
                log_message("Exception trying to move file: " + str(plist_path))
                log_message("Associated exception: " + str(err))
            else:
                os.symlink("/etc/stonix.conf", targetAppStonixConf)
    
    
def etcLink(targetDir="", message_level="normal") :
    """
    Create a link from 
    <path-to-stonix4mac.app>/stonix4mac.app/Contents/Resources/stonix.app/Contents/Resources/stonix.conf
    to /etc/stonix.conf 
    
    @author: Roy Nielsen
    """
    if re.match("^\s*$", targetDir) :
        log_message("Cannot link to an empty destination...", "normal", self.message_level)
    else :
        verifyAndFixEtcConf(targetDir, message_level)
        verifyAndFixAppConf(targetDir, message_level)


def install_launchd_job(source_path="", targetDir="/", message_level="normal") :
    """
    Install the launchjob in the targetDir, so next time the system boots (if this
    is being installed on another volume for another computer) the next time the
    other computer boots, STONIX will run in fix mode on that computer.
    """
    #generate random weekly time
    randday = random.randrange(1, 7)
    randhour = random.randrange(1, 23)
    randminute = random.randrange(1, 59)
    #define the weekly fix plist content
    stonixplistfix = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>gov.lanl.stonix.fix</string>
    <key>ProgramArguments</key>
    <array>
        <string>/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix</string>
        <string>-c</string>
        <string>-f</string>
    </array>
    <key>StartCalendarInterval</key>
    <dict>
        <key>Day</key>
        <integer>''' + str(randday) + '''</integer>
        <key>Hour</key>
        <integer>''' + str(randhour) + '''</integer>
        <key>Minute</key>
        <integer>''' + str(randminute) + '''</integer>
    </dict>
</dict>
</plist>'''


    plist_path = os.path.join(targetDir, "/Library/LaunchDaemons/gov.lanl.stonix.fix.plist")

    if not os.path.isfile(plist_path):
        #####
        #Get the date
        myDate = time.strftime("%C%y%m%d", time.localtime())
        myTime = time.strftime("%I%M%S%p", time.localtime())

        #####
        # append the bak.date to the filename
        backup = plist_path + "." + myDate + "." + myTime

        #try:
        #    shutil.move(plist_path, backup)
        #except Exception, err:
        #    log_message("Exception trying to move file: " + str(plist_path))
        #    log_message("Associated exception: " + str(err))
            
        try:
            f = open(plist_path, 'w')
            f.write(stonixplistfix)
            f.close()
        except Exception, err:
            log_message("Problem trying to write plist for fix..")

        # chown launchagent (both user and group)
        try :
            os.chown(plist_path, 0, 0)
        except Exception, err :
            log_message("Could not chown file: " + str(plist_path))
            log_message("Associated exception: " + str(err))
    
        # chmod launchagent
        try :
            os.chmod (plist_path, 0644)
        except Exception, err :
            log_message("Cannot chmod file: " + str(plist_path))
            log_message("Associated exception: " + str(err))


def fix_app_perms(rootDir="/Applications/stonix4mac.app", message_level="normal") :
    """
    Make sure directories are 775, files and links are 664
    Required on the Mac, especially for admins to be able to
    update the app.

    pass in the directory you want to start from.
    """
    for dirName, subdirList, fileList in os.walk(rootDir):
        fullDirName = os.path.join(os.path.abspath(rootDir), dirName)
        log_message('Found directory: %s' % fullDirName, "normal", message_level)
        os.chmod(fullDirName, 0755)
        os.chown(fullDirName, 0, 80)
        for fname in fileList:
            fullFName = os.path.join(os.path.abspath(rootDir), dirName, fname)
            log_message('\t%s' % fullFName, "normal", message_level)
            if os.path.isfile(fullFName) :
                os.chmod(fullFName, 0664)
                os.chown(fullDirName, 0, 80)


def make_files_executable():
    """
    Purpose: to make stonix4mac and stonix executable blobs executable.
    """
    files = ["/Applications/stonix4mac.app/Contents/MacOS/stonix4mac",
             "/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix"]
    
    for myfile in files:
        os.chmod(myfile, 0775)
    

def main() :
    """
    Main function...
    """
    SOURCE_DIR = os.environ["INSTALLER_TEMP"]
    TARGET_DIR = sys.argv[3]
    
    message_level="debug"

    log_message("Starting stonix4mac package postflight...", "normal", message_level)

    etcLink(TARGET_DIR, message_level)

    install_launchd_job(SOURCE_DIR, TARGET_DIR, message_level)

    fix_app_perms()
    
    make_files_executable()

    if not os.path.exists("/usr/bin/stonix"):
        os.symlink("/Applications/stonix4mac.app/Contents/Resources/stonix.app/Contents/MacOS/stonix", "/usr/bin/stonix")

    log_message("Finished stonix4mac package postflight...", "normal", message_level)


if __name__ == "__main__":
    sys.exit(main())

