reate stonixsign.conf with the following content:
 
[ req ]
distinguished_name = req_name
prompt = no
[ req_name ]
CN = stonix-test
[ extensions ]
basicConstraints=critical,CA:false
keyUsage=critical,digitalSignature
extendedKeyUsage=critical,1.2.840.113635.100.4.13
1.2.840.113635.100.6.1.14=critical,DER:0500
 
 
2. Generate the key:
 
openssl genrsa -out stonixsign.key  2048
 
3. Create the self-signed certificate:
 
openssl req -x509 -new -config stonixsign.conf -nodes \
-key stonixsign.key -extensions extensions -sha256 -out stonixsign.crt
 
4. Create a keychain:
 
security create-keychain stonix-test
 
5. Import the cert into the keychain, only valid for the current user:
 
security add-trusted-cert -u -1 -k stonix-test stonixsign.crt
 
6. Now you should be able to use the "build.py" script for the Jenkins user.
 
To build stonix with the new credentials and keychain:
 
sudo ./build.py -d -s "stonix-test" --keychain /Users/<username>/Library/Keychains/stonix-test
 
#####
 
To use on Mac systems other than the build machine, as long as the User is the same, you should just be able to copy the ~/Library/Keychains/stonix-test.keychain on the build machine to the same user folder, same location, then you should be able to run stonix on that machine.
 
References:
 
http://security.stackexchange.com/questions/17909/how-to-create-an-apple-installer-package-signing-certificate
http://bd808.com/blog/2013/10/21/creating-a-self-signed-code-certificate-for-xcode/
... and the security man page
 
 
